name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_NAME: 'Zapper'
  SOLUTION_PATH: 'src/zapper-next-gen.sln'

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
      
    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --no-restore --configuration Release
      
    - name: Run tests
      run: dotnet test ${{ env.SOLUTION_PATH }} --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: success()
      with:
        file: '**/coverage.cobertura.xml'
        fail_ci_if_error: false

  build-artifacts:
    name: Build Release Artifacts
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        runtime: [linux-x64, linux-arm64]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
      
    - name: Publish ${{ matrix.runtime }}
      run: |
        dotnet publish src/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj \
          --configuration Release \
          --runtime ${{ matrix.runtime }} \
          --self-contained true \
          --output artifacts/${{ matrix.runtime }} \
          -p:PublishSingleFile=true \
          -p:IncludeNativeLibrariesForSelfExtract=true
          
    - name: Create archive
      run: |
        cd artifacts/${{ matrix.runtime }}
        if [[ "${{ matrix.runtime }}" == win-* ]]; then
          zip -r ../zapper-${{ matrix.runtime }}.zip .
        else
          tar -czf ../zapper-${{ matrix.runtime }}.tar.gz .
        fi
        cd ../..
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: zapper-${{ matrix.runtime }}
        path: artifacts/zapper-${{ matrix.runtime }}.*
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  notify:
    name: Notify Build Status
    needs: [test, build-artifacts]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Send notification
      uses: 8398a7/action-slack@v3
      if: env.SLACK_WEBHOOK_URL != ''
      with:
        status: ${{ job.status }}
        text: 'Zapper CI/CD Pipeline completed'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}