name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_NAME: 'Zapper.Web'
  SOLUTION_PATH: 'src/zapper-next-gen.sln'

jobs:
  build-and-test:
    name: Build, Test, and Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for some PR checks
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
      
    - name: Check code formatting
      run: |
        # For PRs, just check formatting and provide feedback
        # The auto-format workflow will handle fixing
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          dotnet format ${{ env.SOLUTION_PATH }} --verify-no-changes --verbosity diagnostic || {
            echo "::warning::Code formatting issues detected. The auto-format bot will fix these for you."
            echo "You can also run 'dotnet format' locally to fix formatting issues."
          }
        else
          # For pushes to main/develop, enforce formatting
          dotnet format ${{ env.SOLUTION_PATH }} --verify-no-changes --verbosity diagnostic
        fi
      
    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --no-restore --configuration Release
      
    - name: Run tests
      run: dotnet test ${{ env.SOLUTION_PATH }} --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --logger trx
      
    - name: Generate coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.2.0
      with:
        reports: '**/coverage.cobertura.xml'
        targetdir: 'coverage'
        reporttypes: 'HtmlInline;Cobertura;MarkdownSummaryGithub'
        sourcedirs: 'src'
        title: 'Zapper Code Coverage Report'
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: success()
      with:
        file: './coverage/Cobertura.xml'
        fail_ci_if_error: false
        verbose: true
      
    - name: Add coverage PR comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: coverage/SummaryGithub.md
        
    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: coverage/