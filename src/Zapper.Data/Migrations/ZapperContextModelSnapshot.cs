// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Zapper.Data;

#nullable disable

namespace Zapper.Data.Migrations
{
    [DbContext(typeof(ZapperContext))]
    partial class ZapperContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("Zapper.Core.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("IconUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUsed")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SortOrder");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Zapper.Core.Models.ActivityDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrimaryDevice")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("ActivityId", "DeviceId")
                        .IsUnique();

                    b.ToTable("ActivityDevices");
                });

            modelBuilder.Entity("Zapper.Core.Models.ActivityStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DelayAfterMs")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DelayBeforeMs")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceCommandId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StepOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeviceCommandId");

                    b.HasIndex("ActivityId", "StepOrder")
                        .IsUnique();

                    b.ToTable("ActivitySteps");
                });

            modelBuilder.Entity("Zapper.Core.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthenticationToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("BluetoothAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConnectionType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("IrCodeSet")
                        .HasColumnType("TEXT");

                    b.Property<int?>("IrCodeSetId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("TEXT");

                    b.Property<string>("MacAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("NetworkAddress")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SupportsKeyboardInput")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SupportsMouseInput")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("UseSecureConnection")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("IpAddress", "Port");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Zapper.Core.Models.DeviceCommand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DelayMs")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HttpEndpoint")
                        .HasColumnType("TEXT");

                    b.Property<string>("HttpMethod")
                        .HasColumnType("TEXT");

                    b.Property<string>("IrCode")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRepeatable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("KeyboardText")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MouseDeltaX")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MouseDeltaY")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("NetworkPayload")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId", "Name")
                        .IsUnique();

                    b.ToTable("DeviceCommands");
                });

            modelBuilder.Entity("Zapper.Core.Models.ExternalIrCodeCache", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CacheKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CachedData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CacheKey")
                        .IsUnique();

                    b.HasIndex("ExpiresAt");

                    b.ToTable("ExternalIrCodeCache");
                });

            modelBuilder.Entity("Zapper.Core.Models.IrCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CommandName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Frequency")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HexCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("IRCodeSetId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Protocol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RawData")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IRCodeSetId");

                    b.HasIndex("Brand", "Model", "CommandName");

                    b.ToTable("IrCodes");
                });

            modelBuilder.Entity("Zapper.Core.Models.IrCodeSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DownloadCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Brand", "Model")
                        .IsUnique();

                    b.ToTable("IrCodeSets");
                });

            modelBuilder.Entity("Zapper.Core.Models.ActivityDevice", b =>
                {
                    b.HasOne("Zapper.Core.Models.Activity", "Activity")
                        .WithMany("ActivityDevices")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zapper.Core.Models.Device", "Device")
                        .WithMany("ActivityDevices")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Zapper.Core.Models.ActivityStep", b =>
                {
                    b.HasOne("Zapper.Core.Models.Activity", "Activity")
                        .WithMany("Steps")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zapper.Core.Models.DeviceCommand", "DeviceCommand")
                        .WithMany("ActivitySteps")
                        .HasForeignKey("DeviceCommandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("DeviceCommand");
                });

            modelBuilder.Entity("Zapper.Core.Models.DeviceCommand", b =>
                {
                    b.HasOne("Zapper.Core.Models.Device", "Device")
                        .WithMany("Commands")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Zapper.Core.Models.IrCode", b =>
                {
                    b.HasOne("Zapper.Core.Models.IrCodeSet", null)
                        .WithMany("Codes")
                        .HasForeignKey("IRCodeSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Zapper.Core.Models.Activity", b =>
                {
                    b.Navigation("ActivityDevices");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Zapper.Core.Models.Device", b =>
                {
                    b.Navigation("ActivityDevices");

                    b.Navigation("Commands");
                });

            modelBuilder.Entity("Zapper.Core.Models.DeviceCommand", b =>
                {
                    b.Navigation("ActivitySteps");
                });

            modelBuilder.Entity("Zapper.Core.Models.IrCodeSet", b =>
                {
                    b.Navigation("Codes");
                });
#pragma warning restore 612, 618
        }
    }
}
