@using Zapper.Contracts.Devices
@using Zapper.Contracts
@using Zapper.Client.Abstractions
@using Microsoft.AspNetCore.SignalR.Client
@inject IZapperApiClient? ApiClient
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<MudDialog @bind-Visible="IsVisible" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            @if (_currentStep == WizardStep.DeviceType)
            {
                <span>Add New Device - Select Type</span>
            }
            else if (_currentStep == WizardStep.BluetoothScan)
            {
                <span>Add New Device - Scan for @_selectedDeviceTypeName Devices</span>
            }
            else if (_currentStep == WizardStep.WebOSScan)
            {
                <span>Add New Device - Scan for @_selectedDeviceTypeName TVs</span>
            }
            else if (_currentStep == WizardStep.Configuration)
            {
                <span>Add New Device - Configure @_selectedDeviceTypeName</span>
            }
        </MudText>
    </TitleContent>
    <DialogContent>
        @if (_currentStep == WizardStep.DeviceType)
        {
            <MudText Class="mb-4">Choose the type of device you want to add:</MudText>
            <MudGrid>
                <MudItem xs="6" sm="4">
                    <MudCard Class="@GetCardClass(ConnectionType.Bluetooth, false)" 
                             Style="cursor: pointer;" @onclick="@(() => SelectDeviceTypeAndProceed(ConnectionType.Bluetooth, "Bluetooth"))">
                        <MudCardContent Class="text-center pa-4">
                            <MudIcon Icon="@Icons.Material.Filled.Bluetooth" Size="Size.Large" Class="mb-2" />
                            <MudText Typo="Typo.h6">Bluetooth</MudText>
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">
                                Apple TV, Android TV, Controllers
                            </MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="6" sm="4">
                    <MudCard Class="@GetCardClass(ConnectionType.InfraredIr, false)" 
                             Style="cursor: pointer;" @onclick="@(() => SelectDeviceTypeAndProceed(ConnectionType.InfraredIr, "Infrared"))">
                        <MudCardContent Class="text-center pa-4">
                            <MudIcon Icon="@Icons.Material.Filled.Sensors" Size="Size.Large" Class="mb-2" />
                            <MudText Typo="Typo.h6">Infrared</MudText>
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">
                                TVs, Sound Bars, Cable Boxes
                            </MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="6" sm="4">
                    <MudCard Class="@GetCardClass(ConnectionType.NetworkTcp, false)" 
                             Style="cursor: pointer;" @onclick="@(() => SelectDeviceTypeAndProceed(ConnectionType.NetworkTcp, "Network"))">
                        <MudCardContent Class="text-center pa-4">
                            <MudIcon Icon="@Icons.Material.Filled.Wifi" Size="Size.Large" Class="mb-2" />
                            <MudText Typo="Typo.h6">Network</MudText>
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">
                                Smart TVs, Receivers, IP Devices
                            </MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="6" sm="4">
                    <MudCard Class="@GetCardClass(ConnectionType.NetworkWebSocket, true)" 
                             Style="cursor: pointer;" @onclick="@(() => SelectDeviceTypeAndProceed(ConnectionType.NetworkWebSocket, "Roku", true))">
                        <MudCardContent Class="text-center pa-4">
                            <MudIcon Icon="@Icons.Material.Filled.Cast" Size="Size.Large" Class="mb-2" />
                            <MudText Typo="Typo.h6">Roku</MudText>
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">
                                Roku Streaming Devices
                            </MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="6" sm="4">
                    <MudCard Class="@GetCardClass(ConnectionType.Usb, false)" 
                             Style="cursor: pointer;" @onclick="@(() => SelectDeviceTypeAndProceed(ConnectionType.Usb, "USB"))">
                        <MudCardContent Class="text-center pa-4">
                            <MudIcon Icon="@Icons.Material.Filled.Usb" Size="Size.Large" Class="mb-2" />
                            <MudText Typo="Typo.h6">USB</MudText>
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">
                                USB Remote Controls
                            </MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="6" sm="4">
                    <MudCard Class="@GetCardClass(ConnectionType.WebOs, false)" 
                             Style="cursor: pointer;" @onclick="@(() => SelectDeviceTypeAndProceed(ConnectionType.WebOs, "WebOS"))">
                        <MudCardContent Class="text-center pa-4">
                            <MudIcon Icon="@Icons.Material.Filled.Tv" Size="Size.Large" Class="mb-2" />
                            <MudText Typo="Typo.h6">WebOS</MudText>
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">
                                LG Smart TVs
                            </MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        }
        else if (_currentStep == WizardStep.BluetoothScan)
        {
            <MudText Class="mb-4">Scanning for available Bluetooth devices...</MudText>
            
            @if (_isScanning)
            {
                <div class="d-flex justify-center align-center" style="min-height: 200px;">
                    <div class="text-center">
                        <MudProgressCircular Size="Size.Large" Indeterminate="true" Class="mb-4" />
                        <MudText Typo="Typo.h6" Class="mb-2">Scanning for devices...</MudText>
                        <MudText Typo="Typo.body2" Class="mud-text-secondary">
                            Please make sure your devices are in pairing mode
                        </MudText>
                    </div>
                </div>
            }
            else if (!string.IsNullOrEmpty(_scanError))
            {
                <MudAlert Severity="Severity.Error" Class="mb-4">
                    @_scanError
                </MudAlert>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="StartBluetoothScan" Class="mb-4">
                    Retry Scan
                </MudButton>
            }
            else if (_discoveredBluetoothDevices.Any())
            {
                <MudText Class="mb-3">Found @_discoveredBluetoothDevices.Count() device(s). Select the device you want to add:</MudText>
                <div class="mb-4">
                    @foreach (var device in _discoveredBluetoothDevices)
                    {
                        <MudButton FullWidth="true" 
                                  Color="@(_selectedBluetoothDevice == device ? Color.Primary : Color.Default)"
                                  Variant="@(_selectedBluetoothDevice == device ? Variant.Filled : Variant.Outlined)"
                                  OnClick="@(() => SelectBluetoothDevice(device))"
                                  Class="mb-2">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Bluetooth" Class="mr-3" />
                                <div class="text-left">
                                    <MudText Typo="Typo.subtitle1">@device</MudText>
                                    <MudText Typo="Typo.body2" Class="mud-text-secondary">Bluetooth Device</MudText>
                                </div>
                            </div>
                        </MudButton>
                    }
                </div>
                <MudButton Color="Color.Secondary" Variant="Variant.Text" OnClick="StartBluetoothScan" StartIcon="@Icons.Material.Filled.Refresh" Class="mt-2">
                    Rescan
                </MudButton>
            }
            else
            {
                <MudAlert Severity="Severity.Warning" Class="mb-4">
                    No Bluetooth devices found. Make sure your devices are powered on and in pairing mode.
                </MudAlert>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="StartBluetoothScan" Class="mb-4">
                    Start Scan
                </MudButton>
            }
        }
        else if (_currentStep == WizardStep.WebOSScan)
        {
            <MudText Class="mb-4">Scanning for available WebOS TVs on your network...</MudText>
            
            @if (_isWebOSScanning)
            {
                <div class="d-flex justify-center align-center" style="min-height: 200px;">
                    <div class="text-center">
                        <MudProgressCircular Size="Size.Large" Indeterminate="true" Class="mb-4" />
                        <MudText Typo="Typo.h6" Class="mb-2">Scanning for WebOS TVs...</MudText>
                        <MudText Typo="Typo.body2" Class="mud-text-secondary">
                            Please make sure your TV is powered on and connected to the network
                        </MudText>
                    </div>
                </div>
            }
            else if (!string.IsNullOrEmpty(_webOSScanError))
            {
                <MudAlert Severity="Severity.Error" Class="mb-4">
                    @_webOSScanError
                </MudAlert>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="StartWebOSScan" Class="mb-4">
                    Retry Scan
                </MudButton>
            }
            else if (_discoveredWebOSDevices.Any())
            {
                <MudText Class="mb-3">Found @_discoveredWebOSDevices.Count() TV(s). Select the TV you want to add:</MudText>
                <div class="mb-4">
                    @foreach (var device in _discoveredWebOSDevices)
                    {
                        <MudButton FullWidth="true" 
                                  Color="@(_selectedWebOSDevice?.Name == device.Name ? Color.Primary : Color.Default)"
                                  Variant="@(_selectedWebOSDevice?.Name == device.Name ? Variant.Filled : Variant.Outlined)"
                                  OnClick="@(() => SelectWebOSDevice(device))"
                                  Class="mb-2">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Tv" Class="mr-3" />
                                <div class="text-left">
                                    <MudText Typo="Typo.subtitle1">@device.Name</MudText>
                                    <MudText Typo="Typo.body2" Class="mud-text-secondary">@device.IpAddress</MudText>
                                    @if (!string.IsNullOrEmpty(device.ModelName))
                                    {
                                        <MudText Typo="Typo.caption" Class="mud-text-secondary">@device.ModelName</MudText>
                                    }
                                </div>
                            </div>
                        </MudButton>
                    }
                </div>
                <MudButton Color="Color.Secondary" Variant="Variant.Text" OnClick="StartWebOSScan" StartIcon="@Icons.Material.Filled.Refresh" Class="mt-2">
                    Rescan
                </MudButton>
            }
            else
            {
                <MudAlert Severity="Severity.Warning" Class="mb-4">
                    No WebOS TVs found on your network. Make sure your TV is powered on and connected to the same network.
                </MudAlert>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="StartWebOSScan" Class="mb-4">
                    Start Scan
                </MudButton>
            }
            
            <MudDivider Class="my-4" />
            <MudText Typo="Typo.h6" Class="mb-2">Or enter IP address manually:</MudText>
            <MudTextField @bind-Value="_manualWebOSIpAddress" Label="TV IP Address" 
                         HelperText="Enter the IP address of your WebOS TV (e.g., 192.168.1.100)" 
                         Class="mb-2" />
            <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="UseManualWebOSIP" 
                      Disabled="@(string.IsNullOrWhiteSpace(_manualWebOSIpAddress))" Class="mb-4">
                Use This IP Address
            </MudButton>
        }
        else if (_currentStep == WizardStep.Configuration)
        {
            <MudTextField @bind-Value="_newDevice.Name" Label="Device Name" Required="true" Class="mb-4" />
            <MudTextField @bind-Value="_newDevice.Brand" Label="Brand" Class="mb-4" />
            <MudTextField @bind-Value="_newDevice.Model" Label="Model" Class="mb-4" />
            
            <MudSelect T="DeviceType" @bind-Value="_newDevice.Type" Label="Device Type" Required="true" Class="mb-4">
                <MudSelectItem Value="DeviceType.Television">Television</MudSelectItem>
                <MudSelectItem Value="DeviceType.SmartTv">Smart TV</MudSelectItem>
                <MudSelectItem Value="DeviceType.SoundBar">Sound Bar</MudSelectItem>
                <MudSelectItem Value="DeviceType.StreamingDevice">Streaming Device</MudSelectItem>
                <MudSelectItem Value="DeviceType.AppleTv">Apple TV</MudSelectItem>
                <MudSelectItem Value="DeviceType.CableBox">Cable Box</MudSelectItem>
                <MudSelectItem Value="DeviceType.GameConsole">Game Console</MudSelectItem>
                <MudSelectItem Value="DeviceType.Receiver">Receiver</MudSelectItem>
                <MudSelectItem Value="DeviceType.DvdPlayer">DVD Player</MudSelectItem>
                <MudSelectItem Value="DeviceType.BluRayPlayer">Blu-ray Player</MudSelectItem>
            </MudSelect>

            @if (_selectedConnectionType == ConnectionType.NetworkTcp || _selectedConnectionType == ConnectionType.NetworkWebSocket || _selectedConnectionType == ConnectionType.WebOs)
            {
                <MudTextField @bind-Value="_newDevice.IpAddress" Label="IP Address" Required="true" Class="mb-4" 
                              HelperText="Enter the device's IP address (e.g., 192.168.1.100)" />
            }

            @if (_selectedConnectionType == ConnectionType.InfraredIr)
            {
                <MudText Class="mb-2">IR Code Set</MudText>
                <MudSelect T="string" @bind-Value="_selectedIrCodeSet" Label="Select IR Code Set" Class="mb-4">
                    <MudSelectItem Value="@("samsung-tv")">Samsung TV</MudSelectItem>
                    <MudSelectItem Value="@("lg-tv")">LG TV</MudSelectItem>
                    <MudSelectItem Value="@("sony-tv")">Sony TV</MudSelectItem>
                    <MudSelectItem Value="@("generic-tv")">Generic TV</MudSelectItem>
                </MudSelect>
            }

            @if (_selectedConnectionType == ConnectionType.Bluetooth)
            {
                <MudAlert Severity="Severity.Info" Class="mb-4">
                    Make sure your device is in pairing mode before proceeding.
                </MudAlert>
            }
        }
    </DialogContent>
    <DialogActions>
        @if (_currentStep == WizardStep.DeviceType)
        {
            <MudButton OnClick="@(() => IsVisible = false)">Cancel</MudButton>
        }
        else if (_currentStep == WizardStep.BluetoothScan)
        {
            <MudButton OnClick="PreviousStep">Back</MudButton>
            <MudButton OnClick="@(() => IsVisible = false)">Cancel</MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="NextStep" Disabled="@(string.IsNullOrEmpty(_selectedBluetoothDevice))">
                Next
            </MudButton>
        }
        else if (_currentStep == WizardStep.WebOSScan)
        {
            <MudButton OnClick="PreviousStep">Back</MudButton>
            <MudButton OnClick="@(() => IsVisible = false)">Cancel</MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="NextStep" Disabled="@(_selectedWebOSDevice == null && string.IsNullOrWhiteSpace(_manualWebOSIpAddress))">
                Next
            </MudButton>
        }
        else if (_currentStep == WizardStep.Configuration)
        {
            <MudButton OnClick="PreviousStep">Back</MudButton>
            <MudButton OnClick="@(() => IsVisible = false)">Cancel</MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="FinishWizard" Disabled="@(string.IsNullOrWhiteSpace(_newDevice.Name))">
                Add Device
            </MudButton>
        }
    </DialogActions>
</MudDialog>

<style>
    .device-type-card {
        transition: all 0.2s ease;
        border: 2px solid transparent;
    }

    .device-type-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }

    .device-type-card.selected {
        border-color: var(--mud-palette-primary);
        background-color: rgba(var(--mud-palette-primary-rgb), 0.1);
    }
</style>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public EventCallback<CreateDeviceRequest> OnDeviceAdded { get; set; }

    private enum WizardStep
    {
        DeviceType,
        BluetoothScan,
        WebOSScan,
        Configuration
    }

    private WizardStep _currentStep = WizardStep.DeviceType;
    private ConnectionType? _selectedConnectionType;
    private string _selectedDeviceTypeName = "";
    private bool _isRokuDevice = false;
    private CreateDeviceRequest _newDevice = new();
    private string _selectedIrCodeSet = "";
    
    // Bluetooth scanning variables
    private bool _isScanning = false;
    private string _scanError = "";
    private List<string> _discoveredBluetoothDevices = new();
    private string _selectedBluetoothDevice = "";
    
    // WebOS scanning variables
    private bool _isWebOSScanning = false;
    private string _webOSScanError = "";
    private List<WebOSDevice> _discoveredWebOSDevices = new();
    private WebOSDevice? _selectedWebOSDevice = null;
    private string _manualWebOSIpAddress = "";
    
    // SignalR connection for real-time updates
    private HubConnection? _hubConnection;
    
    private DialogOptions _dialogOptions = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };

    private void SelectDeviceType(ConnectionType connectionType, string typeName, bool isRoku = false)
    {
        _selectedConnectionType = connectionType;
        _selectedDeviceTypeName = typeName;
        _isRokuDevice = isRoku;
        _newDevice.ConnectionType = connectionType;
    }

    private async Task SelectDeviceTypeAndProceed(ConnectionType connectionType, string typeName, bool isRoku = false)
    {
        SelectDeviceType(connectionType, typeName, isRoku);
        await NextStep();
    }

    private string GetCardClass(ConnectionType connectionType, bool isRoku = false)
    {
        bool isSelected = _selectedConnectionType == connectionType && (_isRokuDevice == isRoku || !isRoku);
        return $"device-type-card {(isSelected ? "selected" : "")}";
    }

    private async Task NextStep()
    {
        if (_currentStep == WizardStep.DeviceType && _selectedConnectionType.HasValue)
        {
            if (_selectedConnectionType == ConnectionType.Bluetooth)
            {
                _currentStep = WizardStep.BluetoothScan;
                await StartBluetoothScan();
            }
            else if (_selectedConnectionType == ConnectionType.WebOs)
            {
                _currentStep = WizardStep.WebOSScan;
                await StartWebOSScan();
            }
            else
            {
                _currentStep = WizardStep.Configuration;
            }
        }
        else if (_currentStep == WizardStep.BluetoothScan && !string.IsNullOrEmpty(_selectedBluetoothDevice))
        {
            // Pre-populate device name with selected Bluetooth device
            if (string.IsNullOrEmpty(_newDevice.Name))
            {
                _newDevice.Name = _selectedBluetoothDevice;
            }
            _currentStep = WizardStep.Configuration;
        }
        else if (_currentStep == WizardStep.WebOSScan && (_selectedWebOSDevice != null || !string.IsNullOrWhiteSpace(_manualWebOSIpAddress)))
        {
            // Pre-populate device info with selected WebOS TV
            if (_selectedWebOSDevice != null)
            {
                if (string.IsNullOrEmpty(_newDevice.Name))
                {
                    _newDevice.Name = _selectedWebOSDevice.Name;
                }
                _newDevice.IpAddress = _selectedWebOSDevice.IpAddress;
                _newDevice.Brand = "LG";
                _newDevice.Model = _selectedWebOSDevice.ModelName ?? "";
            }
            else if (!string.IsNullOrWhiteSpace(_manualWebOSIpAddress))
            {
                _newDevice.IpAddress = _manualWebOSIpAddress.Trim();
                _newDevice.Brand = "LG";
                if (string.IsNullOrEmpty(_newDevice.Name))
                {
                    _newDevice.Name = $"WebOS TV ({_manualWebOSIpAddress.Trim()})";
                }
            }
            _currentStep = WizardStep.Configuration;
        }
    }

    private void PreviousStep()
    {
        if (_currentStep == WizardStep.Configuration)
        {
            if (_selectedConnectionType == ConnectionType.Bluetooth)
            {
                _currentStep = WizardStep.BluetoothScan;
            }
            else if (_selectedConnectionType == ConnectionType.WebOs)
            {
                _currentStep = WizardStep.WebOSScan;
            }
            else
            {
                _currentStep = WizardStep.DeviceType;
            }
        }
        else if (_currentStep == WizardStep.BluetoothScan || _currentStep == WizardStep.WebOSScan)
        {
            _currentStep = WizardStep.DeviceType;
        }
    }

    private async Task StartBluetoothScan()
    {
        if (ApiClient == null)
        {
            _scanError = "API client not available. Cannot scan for Bluetooth devices.";
            return;
        }

        try
        {
            _isScanning = true;
            _scanError = "";
            _discoveredBluetoothDevices.Clear();
            _selectedBluetoothDevice = "";
            StateHasChanged();

            // Initialize SignalR connection if needed
            await EnsureSignalRConnection();

            // Start the scanning process via API
            try
            {
                var scanRequest = new BluetoothScanRequest { DurationSeconds = 30 };
                var response = await ApiClient.Devices.StartBluetoothScanAsync(scanRequest);
                
                if (!response.Success)
                {
                    _scanError = response.Message ?? "Failed to start Bluetooth scan";
                    _isScanning = false;
                    StateHasChanged();
                }
                // Note: _isScanning will be set to false by SignalR BluetoothScanCompleted event
            }
            catch (Exception ex)
            {
                // Fallback to the old discovery method if new endpoint fails
                _scanError = $"New scanning failed ({ex.Message}), using fallback method...";
                StateHasChanged();
                await Task.Delay(500);
                
                var devices = await ApiClient.Devices.DiscoverBluetoothDevicesAsync();
                _discoveredBluetoothDevices = devices.ToList();
                _isScanning = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            _scanError = $"Failed to scan for Bluetooth devices: {ex.Message}";
            _isScanning = false;
            StateHasChanged();
        }
    }

    private async Task EnsureSignalRConnection()
    {
        if (_hubConnection == null)
        {
            var baseUri = await JSRuntime.InvokeAsync<string>("eval", "window.location.origin");
            _hubConnection = new HubConnectionBuilder()
                .WithUrl($"{baseUri}/hubs/zapper")
                .WithAutomaticReconnect()
                .Build();

            // Subscribe to Bluetooth scanning events
            _hubConnection.On("BluetoothScanStarted", () =>
            {
                InvokeAsync(() =>
                {
                    _isScanning = true;
                    StateHasChanged();
                });
            });

            _hubConnection.On<object>("BluetoothDeviceFound", (device) =>
            {
                InvokeAsync(() =>
                {
                    var deviceName = device?.GetType().GetProperty("Name")?.GetValue(device)?.ToString();
                    if (!string.IsNullOrEmpty(deviceName) && !_discoveredBluetoothDevices.Contains(deviceName))
                    {
                        _discoveredBluetoothDevices.Add(deviceName);
                        StateHasChanged();
                    }
                });
            });

            _hubConnection.On("BluetoothScanCompleted", () =>
            {
                InvokeAsync(() =>
                {
                    _isScanning = false;
                    StateHasChanged();
                });
            });

            _hubConnection.On<string>("BluetoothScanError", (error) =>
            {
                InvokeAsync(() =>
                {
                    _scanError = error;
                    _isScanning = false;
                    StateHasChanged();
                });
            });

            // Subscribe to WebOS scanning events
            _hubConnection.On("WebOSScanStarted", () =>
            {
                InvokeAsync(() =>
                {
                    _isWebOSScanning = true;
                    StateHasChanged();
                });
            });

            _hubConnection.On<object>("WebOSDeviceFound", (device) =>
            {
                InvokeAsync(() =>
                {
                    var deviceType = device?.GetType();
                    var name = deviceType?.GetProperty("Name")?.GetValue(device)?.ToString();
                    var ipAddress = deviceType?.GetProperty("IpAddress")?.GetValue(device)?.ToString();
                    var modelName = deviceType?.GetProperty("ModelName")?.GetValue(device)?.ToString();
                    var modelNumber = deviceType?.GetProperty("ModelNumber")?.GetValue(device)?.ToString();
                    var port = deviceType?.GetProperty("Port")?.GetValue(device)?.ToString();

                    if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(ipAddress))
                    {
                        var webOSDevice = new WebOSDevice
                        {
                            Name = name,
                            IpAddress = ipAddress,
                            ModelName = modelName,
                            ModelNumber = modelNumber,
                            Port = !string.IsNullOrEmpty(port) ? int.Parse(port) : 3000
                        };

                        if (!_discoveredWebOSDevices.Any(d => d.IpAddress == webOSDevice.IpAddress))
                        {
                            _discoveredWebOSDevices.Add(webOSDevice);
                            StateHasChanged();
                        }
                    }
                });
            });

            _hubConnection.On("WebOSScanCompleted", () =>
            {
                InvokeAsync(() =>
                {
                    _isWebOSScanning = false;
                    StateHasChanged();
                });
            });

            _hubConnection.On<string>("WebOSScanError", (error) =>
            {
                InvokeAsync(() =>
                {
                    _webOSScanError = error;
                    _isWebOSScanning = false;
                    StateHasChanged();
                });
            });

            await _hubConnection.StartAsync();
        }
    }

    private void SelectBluetoothDevice(string deviceName)
    {
        _selectedBluetoothDevice = deviceName;
    }

    private async Task StartWebOSScan()
    {
        if (ApiClient == null)
        {
            _webOSScanError = "API client not available. Cannot scan for WebOS TVs.";
            return;
        }

        try
        {
            _isWebOSScanning = true;
            _webOSScanError = "";
            _discoveredWebOSDevices.Clear();
            _selectedWebOSDevice = null;
            _manualWebOSIpAddress = "";
            StateHasChanged();

            // Initialize SignalR connection if needed
            await EnsureSignalRConnection();

            // Start the scanning process via API
            try
            {
                var scanRequest = new WebOSScanRequest { DurationSeconds = 15 };
                var response = await ApiClient.Devices.StartWebOSScanAsync(scanRequest);
                
                if (!response.Success)
                {
                    _webOSScanError = response.Message ?? "Failed to start WebOS TV scan";
                    _isWebOSScanning = false;
                    StateHasChanged();
                }
                // Note: _isWebOSScanning will be set to false by SignalR WebOSScanCompleted event
            }
            catch (Exception ex)
            {
                _webOSScanError = $"Failed to start WebOS TV scan: {ex.Message}";
                _isWebOSScanning = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            _webOSScanError = $"Failed to scan for WebOS TVs: {ex.Message}";
            _isWebOSScanning = false;
            StateHasChanged();
        }
    }

    private void SelectWebOSDevice(WebOSDevice device)
    {
        _selectedWebOSDevice = device;
        _manualWebOSIpAddress = ""; // Clear manual IP when device is selected
    }

    private void UseManualWebOSIP()
    {
        if (!string.IsNullOrWhiteSpace(_manualWebOSIpAddress))
        {
            _selectedWebOSDevice = null; // Clear selected device when using manual IP
        }
    }

    private async Task FinishWizard()
    {
        if (!string.IsNullOrWhiteSpace(_newDevice.Name))
        {
            await OnDeviceAdded.InvokeAsync(_newDevice);
            ResetWizard();
        }
    }

    private void ResetWizardState()
    {
        _currentStep = WizardStep.DeviceType;
        _selectedConnectionType = null;
        _selectedDeviceTypeName = "";
        _isRokuDevice = false;
        _newDevice = new CreateDeviceRequest();
        _selectedIrCodeSet = "";
        
        // Reset Bluetooth scanning state
        _isScanning = false;
        _scanError = "";
        _discoveredBluetoothDevices.Clear();
        _selectedBluetoothDevice = "";
        
        // Reset WebOS scanning state
        _isWebOSScanning = false;
        _webOSScanError = "";
        _discoveredWebOSDevices.Clear();
        _selectedWebOSDevice = null;
        _manualWebOSIpAddress = "";
    }

    private void ResetWizard()
    {
        ResetWizardState();
        IsVisible = false;
        _ = IsVisibleChanged.InvokeAsync(false);
    }

    protected override void OnParametersSet()
    {
        if (!IsVisible && _currentStep != WizardStep.DeviceType)
        {
            ResetWizardState();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}

