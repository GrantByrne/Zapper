@page "/activities"

<PageTitle>Zapper - Activities</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Activities</MudText>
<MudText Class="mb-4">Create and manage automated activity sequences</MudText>

<MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Label="Create Activity" Class="mb-4" OnClick="@(() => _showAddDialog = true)" />

<MudGrid>
    @foreach (var activity in _activities)
    {
        <MudItem xs="12" sm="6" md="4">
            <MudCard>
                <MudCardContent>
                    <div class="d-flex align-center mb-2">
                        <MudIcon Icon="@GetActivityIcon(activity.Type)" Class="mr-2" />
                        <MudText Typo="Typo.h6">@activity.Name</MudText>
                    </div>
                    <MudText Class="mb-2">@activity.Description</MudText>
                    <MudText Class="mb-1" Typo="Typo.caption">Devices: @activity.DeviceCount</MudText>
                    <MudText Class="mb-1" Typo="Typo.caption">Steps: @activity.StepCount</MudText>
                    <MudChip T="string" Color="@(activity.IsActive ? Color.Success : Color.Default)" Size="Size.Small">
                        @(activity.IsActive ? "Active" : "Inactive")
                    </MudChip>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="@(() => RunActivity(activity))" StartIcon="@Icons.Material.Filled.PlayArrow">
                        Run
                    </MudButton>
                    <MudButton Color="Color.Secondary" Variant="Variant.Text" OnClick="@(() => EditActivity(activity))">
                        Edit
                    </MudButton>
                    <MudButton Color="Color.Error" Variant="Variant.Text" OnClick="@(() => DeleteActivity(activity))">
                        Delete
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    }
</MudGrid>

@if (!_activities.Any())
{
    <MudPaper Class="pa-8 text-center">
        <MudIcon Icon="@Icons.Material.Filled.PlaylistPlay" Style="font-size: 3rem;" Class="mb-4 mud-text-secondary" />
        <MudText Typo="Typo.h5" Class="mb-2">No activities configured</MudText>
        <MudText Class="mb-4">Create your first activity to automate device control</MudText>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="@(() => _showAddDialog = true)">
            Create Activity
        </MudButton>
    </MudPaper>
}

<MudDialog @bind-Visible="_showAddDialog" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">Create New Activity</MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="_newActivity.Name" Label="Activity Name" Required="true" Class="mb-4" />
        <MudTextField @bind-Value="_newActivity.Description" Label="Description" Lines="2" Class="mb-4" />
        <MudSelect T="string" @bind-Value="_newActivity.Type" Label="Activity Type" Required="true" Class="mb-4">
            <MudSelectItem Value="@("Entertainment")">Entertainment</MudSelectItem>
            <MudSelectItem Value="@("Gaming")">Gaming</MudSelectItem>
            <MudSelectItem Value="@("Music")">Music</MudSelectItem>
            <MudSelectItem Value="@("Movie")">Movie</MudSelectItem>
            <MudSelectItem Value="@("Sports")">Sports</MudSelectItem>
            <MudSelectItem Value="@("Custom")">Custom</MudSelectItem>
        </MudSelect>
        
        <MudText Typo="Typo.h6" Class="mb-2">Activity Steps</MudText>
        <MudText Class="mb-4" Typo="Typo.caption">Define the sequence of commands to execute</MudText>
        
        @for (int i = 0; i < _newActivity.Steps.Count; i++)
        {
            var index = i;
            <MudCard Class="mb-2">
                <MudCardContent Class="pa-3">
                    <div class="d-flex align-center">
                        <MudText Class="mr-3">@(index + 1).</MudText>
                        <MudSelect T="string" @bind-Value="_newActivity.Steps[index].Device" Label="Device" Class="flex-grow-1 mr-2">
                            <MudSelectItem Value="@("Living Room TV")">Living Room TV</MudSelectItem>
                            <MudSelectItem Value="@("Sound Bar")">Sound Bar</MudSelectItem>
                            <MudSelectItem Value="@("Roku")">Roku</MudSelectItem>
                        </MudSelect>
                        <MudSelect T="string" @bind-Value="_newActivity.Steps[index].Command" Label="Command" Class="flex-grow-1 mr-2">
                            <MudSelectItem Value="@("Power On")">Power On</MudSelectItem>
                            <MudSelectItem Value="@("Power Off")">Power Off</MudSelectItem>
                            <MudSelectItem Value="@("Input HDMI1")">Input HDMI1</MudSelectItem>
                            <MudSelectItem Value="@("Input HDMI2")">Input HDMI2</MudSelectItem>
                            <MudSelectItem Value="@("Volume Up")">Volume Up</MudSelectItem>
                            <MudSelectItem Value="@("Volume Down")">Volume Down</MudSelectItem>
                        </MudSelect>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => RemoveStep(index))" />
                    </div>
                </MudCardContent>
            </MudCard>
        }
        
        <MudButton Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Add" OnClick="AddStep" Class="mb-4">
            Add Step
        </MudButton>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => _showAddDialog = false)">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="CreateActivity">Create Activity</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<ActivityModel> _activities = new();
    private bool _showAddDialog = false;
    private ActivityModel _newActivity = new();
    
    private DialogOptions _dialogOptions = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };

    protected override Task OnInitializedAsync()
    {
        LoadSampleActivities();
        _newActivity = new ActivityModel();
        return Task.CompletedTask;
    }

    private void LoadSampleActivities()
    {
        _activities = new List<ActivityModel>
        {
            new() 
            { 
                Name = "Watch Movie", 
                Description = "Turn on TV, sound bar, and switch to movie input",
                Type = "Movie",
                DeviceCount = 2,
                StepCount = 4,
                IsActive = false
            },
            new() 
            { 
                Name = "Listen to Music", 
                Description = "Turn on sound bar and set to music mode",
                Type = "Music",
                DeviceCount = 1,
                StepCount = 2,
                IsActive = false
            },
            new() 
            { 
                Name = "Gaming Setup", 
                Description = "Configure all devices for gaming",
                Type = "Gaming",
                DeviceCount = 3,
                StepCount = 6,
                IsActive = true
            }
        };
    }

    private string GetActivityIcon(string activityType)
    {
        return activityType switch
        {
            "Entertainment" => Icons.Material.Filled.Tv,
            "Gaming" => Icons.Material.Filled.SportsEsports,
            "Music" => Icons.Material.Filled.LibraryMusic,
            "Movie" => Icons.Material.Filled.Movie,
            "Sports" => Icons.Material.Filled.Sports,
            _ => Icons.Material.Filled.PlayArrow
        };
    }

    private void AddStep()
    {
        _newActivity.Steps.Add(new ActivityStep());
    }

    private void RemoveStep(int index)
    {
        _newActivity.Steps.RemoveAt(index);
    }

    private void CreateActivity()
    {
        if (!string.IsNullOrWhiteSpace(_newActivity.Name) && !string.IsNullOrWhiteSpace(_newActivity.Type))
        {
            _activities.Add(new ActivityModel
            {
                Name = _newActivity.Name,
                Description = _newActivity.Description,
                Type = _newActivity.Type,
                DeviceCount = _newActivity.Steps.Select(s => s.Device).Distinct().Count(),
                StepCount = _newActivity.Steps.Count,
                IsActive = false
            });
            
            _newActivity = new ActivityModel();
            _showAddDialog = false;
        }
    }

    private async Task RunActivity(ActivityModel activity)
    {
        activity.IsActive = true;
        StateHasChanged();
        
        // Simulate activity execution
        await Task.Delay(2000);
        
        activity.IsActive = false;
        StateHasChanged();
    }

    private void EditActivity(ActivityModel activity)
    {
        // TODO: Implement activity editing
    }

    private void DeleteActivity(ActivityModel activity)
    {
        _activities.Remove(activity);
    }

    public class ActivityModel
    {
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
        public string Type { get; set; } = "";
        public int DeviceCount { get; set; }
        public int StepCount { get; set; }
        public bool IsActive { get; set; }
        public List<ActivityStep> Steps { get; set; } = new();
    }

    public class ActivityStep
    {
        public string Device { get; set; } = "";
        public string Command { get; set; } = "";
    }
}